{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cf996e81-78cf-4fef-8e05-f1524f905f86",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6f445497-f2a0-4e2b-9558-0b836a645c63",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "csvcovid = pd.read_csv('C://Users/39351/ESAME FINALE/owid-covid-data.csv', dtype={'NomeColonna33': str}, low_memory=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "27a6afd6-e09d-4f10-b9b5-7a8e50e97f48",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iso_code</th>\n",
       "      <th>continent</th>\n",
       "      <th>location</th>\n",
       "      <th>date</th>\n",
       "      <th>total_cases</th>\n",
       "      <th>new_cases</th>\n",
       "      <th>new_cases_smoothed</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>new_deaths</th>\n",
       "      <th>new_deaths_smoothed</th>\n",
       "      <th>...</th>\n",
       "      <th>male_smokers</th>\n",
       "      <th>handwashing_facilities</th>\n",
       "      <th>hospital_beds_per_thousand</th>\n",
       "      <th>life_expectancy</th>\n",
       "      <th>human_development_index</th>\n",
       "      <th>population</th>\n",
       "      <th>excess_mortality_cumulative_absolute</th>\n",
       "      <th>excess_mortality_cumulative</th>\n",
       "      <th>excess_mortality</th>\n",
       "      <th>excess_mortality_cumulative_per_million</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-05</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.511</td>\n",
       "      <td>41128772.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.511</td>\n",
       "      <td>41128772.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.511</td>\n",
       "      <td>41128772.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-08</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.511</td>\n",
       "      <td>41128772.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.511</td>\n",
       "      <td>41128772.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376980</th>\n",
       "      <td>ZWE</td>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2024-01-31</td>\n",
       "      <td>266265.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.429</td>\n",
       "      <td>5737.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.7</td>\n",
       "      <td>36.791</td>\n",
       "      <td>1.7</td>\n",
       "      <td>61.49</td>\n",
       "      <td>0.571</td>\n",
       "      <td>16320539.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376981</th>\n",
       "      <td>ZWE</td>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2024-02-01</td>\n",
       "      <td>266265.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.429</td>\n",
       "      <td>5737.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.7</td>\n",
       "      <td>36.791</td>\n",
       "      <td>1.7</td>\n",
       "      <td>61.49</td>\n",
       "      <td>0.571</td>\n",
       "      <td>16320539.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376982</th>\n",
       "      <td>ZWE</td>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2024-02-02</td>\n",
       "      <td>266265.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.429</td>\n",
       "      <td>5737.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.7</td>\n",
       "      <td>36.791</td>\n",
       "      <td>1.7</td>\n",
       "      <td>61.49</td>\n",
       "      <td>0.571</td>\n",
       "      <td>16320539.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376983</th>\n",
       "      <td>ZWE</td>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2024-02-03</td>\n",
       "      <td>266265.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.429</td>\n",
       "      <td>5737.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.7</td>\n",
       "      <td>36.791</td>\n",
       "      <td>1.7</td>\n",
       "      <td>61.49</td>\n",
       "      <td>0.571</td>\n",
       "      <td>16320539.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376984</th>\n",
       "      <td>ZWE</td>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2024-02-04</td>\n",
       "      <td>266265.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>5737.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.7</td>\n",
       "      <td>36.791</td>\n",
       "      <td>1.7</td>\n",
       "      <td>61.49</td>\n",
       "      <td>0.571</td>\n",
       "      <td>16320539.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>376985 rows × 67 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       iso_code continent     location        date  total_cases  new_cases  \\\n",
       "0           AFG      Asia  Afghanistan  2020-01-05          NaN        0.0   \n",
       "1           AFG      Asia  Afghanistan  2020-01-06          NaN        0.0   \n",
       "2           AFG      Asia  Afghanistan  2020-01-07          NaN        0.0   \n",
       "3           AFG      Asia  Afghanistan  2020-01-08          NaN        0.0   \n",
       "4           AFG      Asia  Afghanistan  2020-01-09          NaN        0.0   \n",
       "...         ...       ...          ...         ...          ...        ...   \n",
       "376980      ZWE    Africa     Zimbabwe  2024-01-31     266265.0        0.0   \n",
       "376981      ZWE    Africa     Zimbabwe  2024-02-01     266265.0        0.0   \n",
       "376982      ZWE    Africa     Zimbabwe  2024-02-02     266265.0        0.0   \n",
       "376983      ZWE    Africa     Zimbabwe  2024-02-03     266265.0        0.0   \n",
       "376984      ZWE    Africa     Zimbabwe  2024-02-04     266265.0        0.0   \n",
       "\n",
       "        new_cases_smoothed  total_deaths  new_deaths  new_deaths_smoothed  \\\n",
       "0                      NaN           NaN         0.0                  NaN   \n",
       "1                      NaN           NaN         0.0                  NaN   \n",
       "2                      NaN           NaN         0.0                  NaN   \n",
       "3                      NaN           NaN         0.0                  NaN   \n",
       "4                      NaN           NaN         0.0                  NaN   \n",
       "...                    ...           ...         ...                  ...   \n",
       "376980               4.429        5737.0         0.0                  0.0   \n",
       "376981               4.429        5737.0         0.0                  0.0   \n",
       "376982               4.429        5737.0         0.0                  0.0   \n",
       "376983               4.429        5737.0         0.0                  0.0   \n",
       "376984               0.000        5737.0         0.0                  0.0   \n",
       "\n",
       "        ...  male_smokers  handwashing_facilities  hospital_beds_per_thousand  \\\n",
       "0       ...           NaN                  37.746                         0.5   \n",
       "1       ...           NaN                  37.746                         0.5   \n",
       "2       ...           NaN                  37.746                         0.5   \n",
       "3       ...           NaN                  37.746                         0.5   \n",
       "4       ...           NaN                  37.746                         0.5   \n",
       "...     ...           ...                     ...                         ...   \n",
       "376980  ...          30.7                  36.791                         1.7   \n",
       "376981  ...          30.7                  36.791                         1.7   \n",
       "376982  ...          30.7                  36.791                         1.7   \n",
       "376983  ...          30.7                  36.791                         1.7   \n",
       "376984  ...          30.7                  36.791                         1.7   \n",
       "\n",
       "        life_expectancy  human_development_index  population  \\\n",
       "0                 64.83                    0.511  41128772.0   \n",
       "1                 64.83                    0.511  41128772.0   \n",
       "2                 64.83                    0.511  41128772.0   \n",
       "3                 64.83                    0.511  41128772.0   \n",
       "4                 64.83                    0.511  41128772.0   \n",
       "...                 ...                      ...         ...   \n",
       "376980            61.49                    0.571  16320539.0   \n",
       "376981            61.49                    0.571  16320539.0   \n",
       "376982            61.49                    0.571  16320539.0   \n",
       "376983            61.49                    0.571  16320539.0   \n",
       "376984            61.49                    0.571  16320539.0   \n",
       "\n",
       "        excess_mortality_cumulative_absolute  excess_mortality_cumulative  \\\n",
       "0                                        NaN                          NaN   \n",
       "1                                        NaN                          NaN   \n",
       "2                                        NaN                          NaN   \n",
       "3                                        NaN                          NaN   \n",
       "4                                        NaN                          NaN   \n",
       "...                                      ...                          ...   \n",
       "376980                                   NaN                          NaN   \n",
       "376981                                   NaN                          NaN   \n",
       "376982                                   NaN                          NaN   \n",
       "376983                                   NaN                          NaN   \n",
       "376984                                   NaN                          NaN   \n",
       "\n",
       "        excess_mortality  excess_mortality_cumulative_per_million  \n",
       "0                    NaN                                      NaN  \n",
       "1                    NaN                                      NaN  \n",
       "2                    NaN                                      NaN  \n",
       "3                    NaN                                      NaN  \n",
       "4                    NaN                                      NaN  \n",
       "...                  ...                                      ...  \n",
       "376980               NaN                                      NaN  \n",
       "376981               NaN                                      NaN  \n",
       "376982               NaN                                      NaN  \n",
       "376983               NaN                                      NaN  \n",
       "376984               NaN                                      NaN  \n",
       "\n",
       "[376985 rows x 67 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "csvcovid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e952e0a-3b1e-46a7-babe-daf2400e15ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Si richiede di verificare le dimensioni del dataset e le diciture presenti nell'intestazione;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "be10b863-a12b-4cba-bddf-388ac6bfc074",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(376985, 67)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "csvcovid.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "adf3a3bd-66bc-4ac0-bb4c-8759d8df4f62",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iso_code</th>\n",
       "      <th>continent</th>\n",
       "      <th>location</th>\n",
       "      <th>date</th>\n",
       "      <th>total_cases</th>\n",
       "      <th>new_cases</th>\n",
       "      <th>new_cases_smoothed</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>new_deaths</th>\n",
       "      <th>new_deaths_smoothed</th>\n",
       "      <th>...</th>\n",
       "      <th>male_smokers</th>\n",
       "      <th>handwashing_facilities</th>\n",
       "      <th>hospital_beds_per_thousand</th>\n",
       "      <th>life_expectancy</th>\n",
       "      <th>human_development_index</th>\n",
       "      <th>population</th>\n",
       "      <th>excess_mortality_cumulative_absolute</th>\n",
       "      <th>excess_mortality_cumulative</th>\n",
       "      <th>excess_mortality</th>\n",
       "      <th>excess_mortality_cumulative_per_million</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>0 rows × 67 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [iso_code, continent, location, date, total_cases, new_cases, new_cases_smoothed, total_deaths, new_deaths, new_deaths_smoothed, total_cases_per_million, new_cases_per_million, new_cases_smoothed_per_million, total_deaths_per_million, new_deaths_per_million, new_deaths_smoothed_per_million, reproduction_rate, icu_patients, icu_patients_per_million, hosp_patients, hosp_patients_per_million, weekly_icu_admissions, weekly_icu_admissions_per_million, weekly_hosp_admissions, weekly_hosp_admissions_per_million, total_tests, new_tests, total_tests_per_thousand, new_tests_per_thousand, new_tests_smoothed, new_tests_smoothed_per_thousand, positive_rate, tests_per_case, tests_units, total_vaccinations, people_vaccinated, people_fully_vaccinated, total_boosters, new_vaccinations, new_vaccinations_smoothed, total_vaccinations_per_hundred, people_vaccinated_per_hundred, people_fully_vaccinated_per_hundred, total_boosters_per_hundred, new_vaccinations_smoothed_per_million, new_people_vaccinated_smoothed, new_people_vaccinated_smoothed_per_hundred, stringency_index, population_density, median_age, aged_65_older, aged_70_older, gdp_per_capita, extreme_poverty, cardiovasc_death_rate, diabetes_prevalence, female_smokers, male_smokers, handwashing_facilities, hospital_beds_per_thousand, life_expectancy, human_development_index, population, excess_mortality_cumulative_absolute, excess_mortality_cumulative, excess_mortality, excess_mortality_cumulative_per_million]\n",
       "Index: []\n",
       "\n",
       "[0 rows x 67 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "csvcovid.head(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "607d071a-e002-4fda-958d-f72dd4dac55c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Si chiede poi per ogni continente di trovare il numero di casi totali avvenuti in quello stesso continente; si chiede di non considerare eventuali locazioni che nel dataset non appartengono ad alcun continente;"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b57ec6ac-d3f4-43a7-af63-034c7be18e94",
   "metadata": {},
   "source": [
    "prima di tutto ho bisogno di filtrare le righe che rappresentano i continenti:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b8c12e8d-ebe8-499b-9aca-ae5378d70737",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "continent= csvcovid[csvcovid['continent'].notnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e0d82d49-fc95-419f-8b46-2255a8734c30",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iso_code</th>\n",
       "      <th>continent</th>\n",
       "      <th>location</th>\n",
       "      <th>date</th>\n",
       "      <th>total_cases</th>\n",
       "      <th>new_cases</th>\n",
       "      <th>new_cases_smoothed</th>\n",
       "      <th>total_deaths</th>\n",
       "      <th>new_deaths</th>\n",
       "      <th>new_deaths_smoothed</th>\n",
       "      <th>...</th>\n",
       "      <th>male_smokers</th>\n",
       "      <th>handwashing_facilities</th>\n",
       "      <th>hospital_beds_per_thousand</th>\n",
       "      <th>life_expectancy</th>\n",
       "      <th>human_development_index</th>\n",
       "      <th>population</th>\n",
       "      <th>excess_mortality_cumulative_absolute</th>\n",
       "      <th>excess_mortality_cumulative</th>\n",
       "      <th>excess_mortality</th>\n",
       "      <th>excess_mortality_cumulative_per_million</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-05</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.511</td>\n",
       "      <td>41128772.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.511</td>\n",
       "      <td>41128772.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.511</td>\n",
       "      <td>41128772.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-08</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.511</td>\n",
       "      <td>41128772.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AFG</td>\n",
       "      <td>Asia</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2020-01-09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.746</td>\n",
       "      <td>0.5</td>\n",
       "      <td>64.83</td>\n",
       "      <td>0.511</td>\n",
       "      <td>41128772.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376980</th>\n",
       "      <td>ZWE</td>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2024-01-31</td>\n",
       "      <td>266265.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.429</td>\n",
       "      <td>5737.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.7</td>\n",
       "      <td>36.791</td>\n",
       "      <td>1.7</td>\n",
       "      <td>61.49</td>\n",
       "      <td>0.571</td>\n",
       "      <td>16320539.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376981</th>\n",
       "      <td>ZWE</td>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2024-02-01</td>\n",
       "      <td>266265.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.429</td>\n",
       "      <td>5737.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.7</td>\n",
       "      <td>36.791</td>\n",
       "      <td>1.7</td>\n",
       "      <td>61.49</td>\n",
       "      <td>0.571</td>\n",
       "      <td>16320539.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376982</th>\n",
       "      <td>ZWE</td>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2024-02-02</td>\n",
       "      <td>266265.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.429</td>\n",
       "      <td>5737.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.7</td>\n",
       "      <td>36.791</td>\n",
       "      <td>1.7</td>\n",
       "      <td>61.49</td>\n",
       "      <td>0.571</td>\n",
       "      <td>16320539.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376983</th>\n",
       "      <td>ZWE</td>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2024-02-03</td>\n",
       "      <td>266265.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.429</td>\n",
       "      <td>5737.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.7</td>\n",
       "      <td>36.791</td>\n",
       "      <td>1.7</td>\n",
       "      <td>61.49</td>\n",
       "      <td>0.571</td>\n",
       "      <td>16320539.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376984</th>\n",
       "      <td>ZWE</td>\n",
       "      <td>Africa</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2024-02-04</td>\n",
       "      <td>266265.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>5737.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.7</td>\n",
       "      <td>36.791</td>\n",
       "      <td>1.7</td>\n",
       "      <td>61.49</td>\n",
       "      <td>0.571</td>\n",
       "      <td>16320539.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>358926 rows × 67 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       iso_code continent     location        date  total_cases  new_cases  \\\n",
       "0           AFG      Asia  Afghanistan  2020-01-05          NaN        0.0   \n",
       "1           AFG      Asia  Afghanistan  2020-01-06          NaN        0.0   \n",
       "2           AFG      Asia  Afghanistan  2020-01-07          NaN        0.0   \n",
       "3           AFG      Asia  Afghanistan  2020-01-08          NaN        0.0   \n",
       "4           AFG      Asia  Afghanistan  2020-01-09          NaN        0.0   \n",
       "...         ...       ...          ...         ...          ...        ...   \n",
       "376980      ZWE    Africa     Zimbabwe  2024-01-31     266265.0        0.0   \n",
       "376981      ZWE    Africa     Zimbabwe  2024-02-01     266265.0        0.0   \n",
       "376982      ZWE    Africa     Zimbabwe  2024-02-02     266265.0        0.0   \n",
       "376983      ZWE    Africa     Zimbabwe  2024-02-03     266265.0        0.0   \n",
       "376984      ZWE    Africa     Zimbabwe  2024-02-04     266265.0        0.0   \n",
       "\n",
       "        new_cases_smoothed  total_deaths  new_deaths  new_deaths_smoothed  \\\n",
       "0                      NaN           NaN         0.0                  NaN   \n",
       "1                      NaN           NaN         0.0                  NaN   \n",
       "2                      NaN           NaN         0.0                  NaN   \n",
       "3                      NaN           NaN         0.0                  NaN   \n",
       "4                      NaN           NaN         0.0                  NaN   \n",
       "...                    ...           ...         ...                  ...   \n",
       "376980               4.429        5737.0         0.0                  0.0   \n",
       "376981               4.429        5737.0         0.0                  0.0   \n",
       "376982               4.429        5737.0         0.0                  0.0   \n",
       "376983               4.429        5737.0         0.0                  0.0   \n",
       "376984               0.000        5737.0         0.0                  0.0   \n",
       "\n",
       "        ...  male_smokers  handwashing_facilities  hospital_beds_per_thousand  \\\n",
       "0       ...           NaN                  37.746                         0.5   \n",
       "1       ...           NaN                  37.746                         0.5   \n",
       "2       ...           NaN                  37.746                         0.5   \n",
       "3       ...           NaN                  37.746                         0.5   \n",
       "4       ...           NaN                  37.746                         0.5   \n",
       "...     ...           ...                     ...                         ...   \n",
       "376980  ...          30.7                  36.791                         1.7   \n",
       "376981  ...          30.7                  36.791                         1.7   \n",
       "376982  ...          30.7                  36.791                         1.7   \n",
       "376983  ...          30.7                  36.791                         1.7   \n",
       "376984  ...          30.7                  36.791                         1.7   \n",
       "\n",
       "        life_expectancy  human_development_index  population  \\\n",
       "0                 64.83                    0.511  41128772.0   \n",
       "1                 64.83                    0.511  41128772.0   \n",
       "2                 64.83                    0.511  41128772.0   \n",
       "3                 64.83                    0.511  41128772.0   \n",
       "4                 64.83                    0.511  41128772.0   \n",
       "...                 ...                      ...         ...   \n",
       "376980            61.49                    0.571  16320539.0   \n",
       "376981            61.49                    0.571  16320539.0   \n",
       "376982            61.49                    0.571  16320539.0   \n",
       "376983            61.49                    0.571  16320539.0   \n",
       "376984            61.49                    0.571  16320539.0   \n",
       "\n",
       "        excess_mortality_cumulative_absolute  excess_mortality_cumulative  \\\n",
       "0                                        NaN                          NaN   \n",
       "1                                        NaN                          NaN   \n",
       "2                                        NaN                          NaN   \n",
       "3                                        NaN                          NaN   \n",
       "4                                        NaN                          NaN   \n",
       "...                                      ...                          ...   \n",
       "376980                                   NaN                          NaN   \n",
       "376981                                   NaN                          NaN   \n",
       "376982                                   NaN                          NaN   \n",
       "376983                                   NaN                          NaN   \n",
       "376984                                   NaN                          NaN   \n",
       "\n",
       "        excess_mortality  excess_mortality_cumulative_per_million  \n",
       "0                    NaN                                      NaN  \n",
       "1                    NaN                                      NaN  \n",
       "2                    NaN                                      NaN  \n",
       "3                    NaN                                      NaN  \n",
       "4                    NaN                                      NaN  \n",
       "...                  ...                                      ...  \n",
       "376980               NaN                                      NaN  \n",
       "376981               NaN                                      NaN  \n",
       "376982               NaN                                      NaN  \n",
       "376983               NaN                                      NaN  \n",
       "376984               NaN                                      NaN  \n",
       "\n",
       "[358926 rows x 67 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "continent"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f420abd-6649-491a-bf80-b89bca31c99b",
   "metadata": {},
   "source": [
    "adesso devo raggruppare per continente e sommare i casi totali per ogni continente"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "420f088e-15f6-4b56-af05-6f79e7d5044c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "totalcasesforcontinent=continent.groupby('continent')['new_cases'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "267fa0bf-b624-444c-b49e-9d38a6e32963",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "continent\n",
      "Africa            13136517.0\n",
      "Asia             301391174.0\n",
      "Europe           252013370.0\n",
      "North America    124526003.0\n",
      "Oceania           14741735.0\n",
      "South America     68752780.0\n",
      "Name: new_cases, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(totalcasesforcontinent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "aba4950d-b8c0-44a7-9702-1ba842e836d8",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "DFtotalcasesforcontinent=pd.DataFrame(totalcasesforcontinent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f7159d77-0c8f-4fb8-b694-d5b3ccf1e31d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>new_cases</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>continent</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Africa</th>\n",
       "      <td>13136517.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asia</th>\n",
       "      <td>301391174.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Europe</th>\n",
       "      <td>252013370.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>North America</th>\n",
       "      <td>124526003.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oceania</th>\n",
       "      <td>14741735.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South America</th>\n",
       "      <td>68752780.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 new_cases\n",
       "continent                 \n",
       "Africa          13136517.0\n",
       "Asia           301391174.0\n",
       "Europe         252013370.0\n",
       "North America  124526003.0\n",
       "Oceania         14741735.0\n",
       "South America   68752780.0"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DFtotalcasesforcontinent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81a6efed-c329-4e48-8e5e-e560e333ba26",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Sempre riguardo i casi di COVID totali, si chiede di sviluppare una funzione che prenda in input il dataset e due nomi di continenti, e che ne confronti i seguenti relativi descrittori statistici: valori minimo e massimo, media, e percentuale rispetto al numero dei casi totali nel mondo (calcolati anche sulle locazioni senza indicazione di continente);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "5e028cd8-c296-437a-b893-83eec5f8757f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "somma dei total cases 3282553220.0\n"
     ]
    }
   ],
   "source": [
    "sommatotalcases=(csvcovid['new_cases'].sum())\n",
    "print('somma dei total cases',sommatotalcases)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8021e88d-fcc8-4665-aabe-2735c2839a6a",
   "metadata": {},
   "source": [
    "filtro le righe che contegono i continenti specifici "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "2abdec75-c887-4307-9a2a-568fd466acd2",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "Oceania=csvcovid[csvcovid['continent']=='Oceania']\n",
    "Asia=csvcovid[csvcovid['continent']=='Asia']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8701b2c4-9f00-49aa-9e15-303347b78005",
   "metadata": {},
   "source": [
    "Descrittori statistici: calcolare min, max, percentuale per Oceania, Asia e anche per tutti i continenti "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "1c959a46-b284-42c4-b2d7-c968ccdded0d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Descrittori per tutti i continenti:\n",
      "min     0.000000e+00\n",
      "max     4.423623e+07\n",
      "mean    8.965883e+03\n",
      "Name: new_cases, dtype: float64\n",
      "\n",
      "Descrittori per il continente Asia:\n",
      "min     0.000000e+00\n",
      "max     4.047548e+07\n",
      "mean    4.298159e+03\n",
      "Name: new_cases, dtype: float64\n",
      "\n",
      "Descrittori per il continente Oceania:\n",
      "min          0.000000\n",
      "max     588813.000000\n",
      "mean       411.722804\n",
      "Name: new_cases, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "descrittoriTot=csvcovid['new_cases'].describe()[['min', 'max', 'mean']]\n",
    "print(\"\\nDescrittori per tutti i continenti:\")\n",
    "print(descrittoriTot)\n",
    "descrittoriAsia=Asia['new_cases'].describe()[['min', 'max', 'mean']]\n",
    "print(\"\\nDescrittori per il continente Asia:\")\n",
    "print(descrittoriAsia)\n",
    "descrittoriOceania=Oceania['new_cases'].describe()[['min', 'max', 'mean']]\n",
    "print(\"\\nDescrittori per il continente Oceania:\")\n",
    "print(descrittoriOceania) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc068f99-63ea-4a49-afde-8cc1156c67ee",
   "metadata": {},
   "source": [
    "Calcolo le percentuali dei casi totali rispetto al totale mondiale "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "5cd74867-4b3d-446a-8159-29555ab90596",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Percentuali dell'Asia rispetto ai casi mondiali totali:\n",
      "9.18%\n",
      "\n",
      "Percentuali dell'Oceania rispetto ai casi mondiali totali:\n",
      "0.45%\n",
      "Percentuale totale per ogni continente: \n",
      "Africa: 0.40%\n",
      "Asia: 9.18%\n",
      "Europe: 7.68%\n",
      "North America: 3.79%\n",
      "Oceania: 0.45%\n",
      "South America: 2.09%\n"
     ]
    }
   ],
   "source": [
    "perc_Asia=Asia['new_cases'].sum()/sommatotalcases*100\n",
    "print(\"\\nPercentuali dell'Asia rispetto ai casi mondiali totali:\")\n",
    "print(f'{perc_Asia:.2f}%')\n",
    "perc_Oceania=Oceania['new_cases'].sum()/sommatotalcases*100\n",
    "print(\"\\nPercentuali dell'Oceania rispetto ai casi mondiali totali:\")\n",
    "print(f'{perc_Oceania:.2f}%')\n",
    "perc_casiTot_continente=csvcovid.groupby('continent')['new_cases'].sum()/sommatotalcases*100\n",
    "print('Percentuale totale per ogni continente: ')\n",
    "for continent, percentuale in perc_casiTot_continente.items():\n",
    "    print(f'{continent}: {percentuale:.2f}%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "3b070ae1-717c-4b43-9076-40ff2c3a3ffc",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "DF_percasitotali=pd.DataFrame(perc_casiTot_continente)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "69f4e084-c4cc-453d-b344-11d0adbbd5df",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>new_cases</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>continent</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Africa</th>\n",
       "      <td>0.400192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asia</th>\n",
       "      <td>9.181608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Europe</th>\n",
       "      <td>7.677358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>North America</th>\n",
       "      <td>3.793571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oceania</th>\n",
       "      <td>0.449094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South America</th>\n",
       "      <td>2.094491</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               new_cases\n",
       "continent               \n",
       "Africa          0.400192\n",
       "Asia            9.181608\n",
       "Europe          7.677358\n",
       "North America   3.793571\n",
       "Oceania         0.449094\n",
       "South America   2.094491"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DF_percasitotali"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "3bcb1c00-ff39-44e5-a73e-fa3b0f1b28a0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('dark_background')\n",
    "fluorescent_purple = (0.8, 0.0, 1.0)\n",
    "edge_color = fluorescent_purple\n",
    "face_color ='none'\n",
    "DF_percasitotali.plot(kind='bar', figsize=(6,4), color= face_color, edgecolor= edge_color)\n",
    "plt.title('Percentuale Covid mondiale per continente')\n",
    "plt.xlabel('Continente')\n",
    "plt.ylabel('Percentuale dei casi totali')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "e47368d8-e429-49e2-bc2b-7fca54c37c92",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def confronto(csvcovid,Asia,Oceania):  \n",
    "\n",
    "    Oceania=csvcovid[csvcovid['continent']=='Oceania']\n",
    "    Asia=csvcovid[csvcovid['continent']=='Asia']\n",
    "    descrittoriTot=csvcovid['new_cases'].describe()[['min', 'max', 'mean']]\n",
    "    descrittoriAsia=Asia['new_cases'].describe()[['min', 'max', 'mean']]\n",
    "    descrittoriOceania=Oceania['new_cases'].describe()[['min', 'max', 'mean']]\n",
    "    return descrittoriTot, descrittoriAsia, descrittoriOceania"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "dca355cf-6f71-414e-b1d5-f74066bafc52",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "risultato=confronto(csvcovid,Asia,Oceania)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "10caf6fc-743a-4ead-8178-e9c8a9b8e6a7",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "DFrisultato=pd.DataFrame(risultato,index=['Continenti_totali','Asia','Oceania'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "5e1a7e7b-43bb-4be8-a564-846956badb4e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Continenti_totali</th>\n",
       "      <td>0.0</td>\n",
       "      <td>44236227.0</td>\n",
       "      <td>8965.882999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asia</th>\n",
       "      <td>0.0</td>\n",
       "      <td>40475477.0</td>\n",
       "      <td>4298.158526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oceania</th>\n",
       "      <td>0.0</td>\n",
       "      <td>588813.0</td>\n",
       "      <td>411.722804</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   min         max         mean\n",
       "Continenti_totali  0.0  44236227.0  8965.882999\n",
       "Asia               0.0  40475477.0  4298.158526\n",
       "Oceania            0.0    588813.0   411.722804"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DFrisultato"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae8abcd0-a09f-41cf-8121-fcd80586d4e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Si chiede poi di effettuare lo stesso tipo di analisi – anche in questo caso sviluppando una funzione ad hoc – per il numero di vaccinazioni totali per ogni continente;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "609fed2a-c7b8-4908-8a98-e7f6d4383d44",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "totalvacc=csvcovid['total_vaccinations'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "b96cbb8b-aca2-4108-b5c8-7f3974db85e0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "40674465662916.0"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "totalvacc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "8ef1565d-61fb-4b51-9f17-28ec7f1efd30",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "totvaccforcontinent=csvcovid.groupby('continent')['total_vaccinations'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "0a7efacb-4751-4672-b1eb-129ca468fe5b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "continent\n",
       "Africa           5.081307e+10\n",
       "Asia             4.323161e+12\n",
       "Europe           7.251537e+11\n",
       "North America    5.709678e+11\n",
       "Oceania          2.599179e+10\n",
       "South America    4.271463e+11\n",
       "Name: total_vaccinations, dtype: float64"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "totvaccforcontinent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "45e0068b-1c85-4263-8b5f-a372ac1399b6",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "DFtotvaccforcontinent=pd.DataFrame(totvaccforcontinent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "a5b94fc8-4c6d-4a68-9bf7-938123020e51",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_vaccinations</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>continent</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Africa</th>\n",
       "      <td>5.081307e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asia</th>\n",
       "      <td>4.323161e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Europe</th>\n",
       "      <td>7.251537e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>North America</th>\n",
       "      <td>5.709678e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oceania</th>\n",
       "      <td>2.599179e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South America</th>\n",
       "      <td>4.271463e+11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               total_vaccinations\n",
       "continent                        \n",
       "Africa               5.081307e+10\n",
       "Asia                 4.323161e+12\n",
       "Europe               7.251537e+11\n",
       "North America        5.709678e+11\n",
       "Oceania              2.599179e+10\n",
       "South America        4.271463e+11"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DFtotvaccforcontinent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "87af7a94-c92e-4a29-b0bb-2267089e2dbe",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Descrittori delle vaccinazioni totali per continente: \n",
      "               min           max          mean\n",
      "continent                                     \n",
      "Africa         0.0  1.330480e+08  8.012152e+06\n",
      "Asia           0.0  3.491077e+09  2.307285e+08\n",
      "Europe         0.0  1.922215e+08  2.727577e+07\n",
      "North America  0.0  6.767288e+08  6.472090e+07\n",
      "Oceania        0.0  6.930634e+07  1.261737e+07\n",
      "South America  0.0  4.864364e+08  6.595835e+07\n"
     ]
    }
   ],
   "source": [
    "Descrittori_tot_V=csvcovid.groupby('continent')['total_vaccinations'].describe()[['min', 'max', 'mean']]\n",
    "print(\"Descrittori delle vaccinazioni totali per continente: \")\n",
    "print(Descrittori_tot_V)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "89e1f40a-7319-4436-9807-ad3c8ffbb3c5",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentuale totale dei vaccini per ogni continente: \n",
      "continent\n",
      "Africa            0.124926\n",
      "Asia             10.628685\n",
      "Europe            1.782823\n",
      "North America     1.403750\n",
      "Oceania           0.063902\n",
      "South America     1.050158\n",
      "Name: total_vaccinations, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "perc_totxcontinenti=csvcovid.groupby('continent')['total_vaccinations'].sum()/totalvacc*100\n",
    "print(\"Percentuale totale dei vaccini per ogni continente: \")\n",
    "print(perc_totxcontinenti)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "8daea5d9-98d5-4e69-afb4-d8d432255a2e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentuale totale dei vaccini per ogni continente:\n",
      "Africa: 0.12%\n",
      "Asia: 10.63%\n",
      "Europe: 1.78%\n",
      "North America: 1.40%\n",
      "Oceania: 0.06%\n",
      "South America: 1.05%\n"
     ]
    }
   ],
   "source": [
    "print('Percentuale totale dei vaccini per ogni continente:')\n",
    "for continent, percentuale in perc_totxcontinenti.items():\n",
    "    print(f'{continent}: {percentuale:.2f}%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "496e66c7-5c08-40a9-8ea9-4a3e2754ce20",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.style.use('dark_background')\n",
    "fluorescent_purple= (0.8, 0.0, 1.0)\n",
    "perc_totxcontinenti.plot(kind='bar', figsize=(6,4), color=face_color,edgecolor=edge_color)\n",
    "plt.legend(['vaccinazioni'])\n",
    "plt.title('Percentuale vaccini mondiale')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "48e8c165-26bc-4873-b0a4-dd43b4c9dbe6",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def confrontovacc (csvcovid,totalvacc,totvaccforcontinent):\n",
    "    totalvacc= csvcovid['total_vaccinations'].sum()\n",
    "    totvaccforcontinent= csvcovid.groupby('continent')['total_vaccinations'].sum()\n",
    "    Descrittori_tot_V= csvcovid.groupby('continent')['total_vaccinations'].describe()[['min', 'max','mean']]\n",
    "    return Descrittori_tot_V\n",
    "risultatovacc = confrontovacc(csvcovid,totalvacc,totvaccforcontinent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "0bb1b2dc-9156-4f2e-b3ea-4d943e214bb9",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>continent</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Africa</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.330480e+08</td>\n",
       "      <td>8.012152e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asia</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3.491077e+09</td>\n",
       "      <td>2.307285e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Europe</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.922215e+08</td>\n",
       "      <td>2.727577e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>North America</th>\n",
       "      <td>0.0</td>\n",
       "      <td>6.767288e+08</td>\n",
       "      <td>6.472090e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oceania</th>\n",
       "      <td>0.0</td>\n",
       "      <td>6.930634e+07</td>\n",
       "      <td>1.261737e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South America</th>\n",
       "      <td>0.0</td>\n",
       "      <td>4.864364e+08</td>\n",
       "      <td>6.595835e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               min           max          mean\n",
       "continent                                     \n",
       "Africa         0.0  1.330480e+08  8.012152e+06\n",
       "Asia           0.0  3.491077e+09  2.307285e+08\n",
       "Europe         0.0  1.922215e+08  2.727577e+07\n",
       "North America  0.0  6.767288e+08  6.472090e+07\n",
       "Oceania        0.0  6.930634e+07  1.261737e+07\n",
       "South America  0.0  4.864364e+08  6.595835e+07"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "risultatovacc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85a878ce-2d0c-4f06-bead-25691b972c66",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Alla fine, basandosi sui calcoli fatti, il committente chiede di stilare un breve (tre o quattro righe) paragrafo testuale riassuntivo sulle statistiche di casi e vaccinazioni, che si concentri solo sulle differenze esistenti tra Europa, Sud America e Oceania."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42802dd1-9501-409d-8e15-073b84923225",
   "metadata": {},
   "source": [
    "Emerge una chiara disparità tra Europa, Sud America e Oceania nella gestione della pandemia da COVID e nell'implementazione delle vaccinazioni. L'Europa, pur registrando un elevato numero di casi confermati, si distingue per il maggior numero di vaccinazioni somministrate. Al contrario, il Sud America, pur avendo meno casi rispetto all'Europa, mostra un livello inferiore di vaccinazioni. Infine, l'Oceania presenta una bassa incidenza di casi e una quantità limitata di vaccinazioni. Questi dati mettono in evidenza l'importanza di un'equa distribuzione dei vaccini che contrasti l'estensione della pandemia."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
